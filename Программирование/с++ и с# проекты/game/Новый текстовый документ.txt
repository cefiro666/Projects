#include "pch.h"
/*#include "Player.h"

using namespace sf;
using namespace std;


int main()
{
	Player left1(15, 150, 50, 200, Color::Green);
	Player right1(15, 150, 935, 200, Color::Blue);

	Text text1;
	text1.setCharacterSize(35);
	
	Font font;
	if (!font.loadFromFile("C:/Windows/Fonts/arial.ttf"))
	{
	}

	text1.setFont(font); //
	
	
	Text text2;
	text2.setCharacterSize(35);
	text2.setFont(font); //
	

	RectangleShape rect;
	rect.setSize(Vector2f(15, 150));
	rect.setFillColor(Color::Green);

	RectangleShape rect1;
	rect1.setSize(Vector2f(15, 150));
	rect1.setFillColor(Color::Blue);
	int xreact1 = 935;
	int yreact1 = 200;

	CircleShape ball;
	ball.setFillColor(Color::Red);
	ball.setRadius(10);
	bool down = true;
	bool naeb = false;
	bool right = true;
	int xreact = 50;
	int yreact = 200;
	float x = 500;
	float y = 300;
	int score2 = 0;
	int score1 = 0;
	bool start = false;
	ContextSettings settings;
	settings.antialiasingLevel = 4;

	RenderWindow window(VideoMode(1000, 600), "PONG",Style::Default, settings);
	window.setFramerateLimit(60);
	rect.setPosition(xreact, yreact);
	rect1.setPosition(xreact1, yreact1);
	ball.setPosition(x, y);
	while (window.isOpen())
	{
		Event event;
		while (window.pollEvent(event))
		{
			if (event.type == Event::Closed)
				window.close();
		}
		string strscore1 = to_string(score1);
		string strscore2 = to_string(score2);
		text1.setString(strscore1);//задает строку тексту
		text2.setString(strscore2);//задает строку тексту
		text1.setPosition(250,50);
		text2.setPosition(700, 50);



		if (start == true) {
			if (ball.getPosition().y <= 0) {
				down = true;
			}
			if (ball.getPosition().y >= 580) {
				down = false;
			}
			if ((ball.getPosition().y > 0) && (!down)) {
				ball.move(0, -5);
			}
			if ((ball.getPosition().y < 580) && down) {
				ball.move(0, 5);
			}
			if (ball.getPosition().x <= 0) {
				ball.setPosition(500, 300);
				start = false;
				naeb = false;
				right = true;
				score1++;
			}
			if (ball.getPosition().x >= 980) {
				ball.setPosition(500, 300);
				start = false;
				naeb = false;
				right = false;
				score2++;

			}
			if ((ball.getPosition().x >= 0) && (!right)) {
				ball.move(-10, 0);
			}
			if ((ball.getPosition().x <= 980) && right) {
				ball.move(10, 0);
			}
			if ((ball.getPosition().x <= rect.getPosition().x + 15) && !((ball.getPosition().y >= rect.getPosition().y) && (ball.getPosition().y <= (rect.getPosition().y + 150)))) {
				naeb = true;
			}

			if ((ball.getPosition().x + 20 >= rect1.getPosition().x) && !((ball.getPosition().y >= rect1.getPosition().y) && (ball.getPosition().y <= (rect1.getPosition().y + 150)))) {
				naeb = true;
			}
			if (!naeb && (ball.getPosition().x <= rect.getPosition().x+15) &&(ball.getPosition().y >= rect.getPosition().y) && (ball.getPosition().y <= (rect.getPosition().y + 150))) {
				right = true;
			}

			if (!naeb && (ball.getPosition().x+20 >= rect1.getPosition().x) && (ball.getPosition().y >= rect1.getPosition().y) && (ball.getPosition().y <= (rect1.getPosition().y + 150))) {
				right = false;
			}
		}
		if (Keyboard::isKeyPressed(Keyboard::Space)) {
			start = true;
		}
		if (Keyboard::isKeyPressed(Keyboard::W)) { 
			if (rect.getPosition().y >= 0) {
				rect.move(0, -8);
			}
		}
		if (Keyboard::isKeyPressed(Keyboard::S)) {
			if (rect.getPosition().y <= 450) {
				rect.move(0, 8);
			}
		}

		if (Keyboard::isKeyPressed(Keyboard::Up)) {
			if (rect1.getPosition().y >= 0) {
				rect1.move(0, -8);
			}
		}
		if (Keyboard::isKeyPressed(Keyboard::Down)) {
			if (rect1.getPosition().y <= 450) {
				rect1.move(0, 8);
			}
		}
		window.clear();
		window.draw(ball);
		window.draw(rect);
		window.draw(rect1);
		window.draw(text1);
		window.draw(text2);
		window.display();
	}
}
*/